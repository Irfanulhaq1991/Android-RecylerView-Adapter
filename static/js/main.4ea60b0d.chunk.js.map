{"version":3,"sources":["components/Ccode.js","components/Content.js","components/Heading.js","components/Contents.js","components/Footer.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Ccode","sample","defaultsProps","Content","descp","defaultProp","Heading","title","style","marginBottom","marginTop","fontSize","fontWeight","Contents","className","paddingLeft","Footer","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAGMA,EAAQ,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZ,OACI,8BACA,+BACKA,OAUbD,EAAME,cAAgB,CAClBD,OAAO,IAGID,QCjBTG,EAAU,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACd,OACE,4BAAIA,KAOVD,EAAQE,YAAc,CAClBD,MAAO,IAGID,QCbf,SAASG,EAAT,GAA2B,IAATC,EAAQ,EAARA,MAEd,OACI,qBAAKC,MAAQ,CAACC,aAAa,OAAOC,UAAU,OAAOC,SAAS,OAAQC,WAAW,QAA/E,SACI,4BAAIL,MAShBD,EAAQJ,cAAgB,CACpBK,MAAM,IAIKD,QC+DAO,MAhFf,WAmDI,OACI,sBAAKC,UAAU,UAAf,UACI,cAAC,EAAD,CAASP,MAAM,gBACf,cAAC,EAAD,CAASH,MAJJ,sKAET,IAE6B,cAAC,EAAD,CAASG,MAAM,sBACxC,cAAC,EAAD,CAASH,MAAM,+CACf,cAAC,EAAD,CAAOH,OAtDL,wHAuDF,cAAC,EAAD,CAASG,MAAM,gEACf,cAAC,EAAD,CAAOH,OAAO,uDACd,cAAC,EAAD,CAASM,MAAM,UACf,qBAAIC,MAAO,CAAEO,YAAa,QAA1B,UACI,4DACA,oDACA,cAAC,EAAD,CAAOd,OApDT,ymBAqDE,4DACA,cAAC,EAAD,CAAOA,OAnCT,mMAoCE,sFACA,cAAC,EAAD,CAAOA,OA7BT,2JA8BE,qKACA,cAAC,EAAD,CAAOA,OA1BT,+NCnCCe,MAXf,WAII,OACA,qBAAKF,UAAU,SAAf,SACI,6DCMOG,EAVA,WACX,OACI,qBAAKH,UAAU,SAAf,SACI,8DCSGI,MAXf,WAEE,OACE,sBAAKJ,UAAU,YAAf,UACC,cAAC,EAAD,IACD,cAAC,EAAD,IACA,cAAC,EAAD,QCCWK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4ea60b0d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Ccode = ({sample}) => {\r\n    return (\r\n        <pre>\r\n        <code >\r\n            {sample}\r\n        </code>\r\n        </pre>\r\n    )\r\n}\r\n\r\nCcode.propTypes = {\r\n    sample:PropTypes.string\r\n}\r\n\r\nCcode.defaultsProps = {\r\n    sample:''\r\n}\r\n\r\nexport default Ccode\r\n ","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Content = ({descp}) => {\r\n    return (\r\n      <p>{descp}</p>\r\n    )\r\n}\r\n\r\nContent.propTypes = {\r\n    descp:PropTypes.string\r\n}\r\nContent.defaultProp = {\r\n    descp :\"\"\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction Heading({title}) {\r\n\r\n    return (\r\n        <div style ={{marginBottom:'10px',marginTop:\"20px\",fontSize:'18px', fontWeight:\"bold\"}}>\r\n            <p>{title}</p>      \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nHeading.propTypes = {\r\n    title:PropTypes.string\r\n}\r\nHeading.defaultsProps = {\r\n    title:\"\"\r\n}\r\n\r\n\r\nexport default Heading\r\n\r\n","import React from 'react'\r\nimport Ccode from './Ccode';\r\nimport Content from './Content';\r\nimport Heading from './Heading';\r\n\r\nfunction Contents() {\r\n\r\n    const cod1 = `android{\r\n        ...\r\n         buildFeatures {\r\n             dataBinding true\r\n         \r\n           }\r\n         }`\r\n\r\n\r\n    const cod2 = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <layout>\r\n        <data>\r\n            <variable\r\n                name=\"dataObject\"\r\n                type=\"com.mm.rcyclerviewadoptorexperiment.DataItems\" />\r\n        </data>\r\n    <LinearLayout\r\n        xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\">\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"match_parent\"\r\n            android:text=\"@{dataObject.message}\"\r\n            />\r\n    \r\n    </LinearLayout>\r\n    </layout>`\r\n\r\n    const cod3 = `\r\n    override fun getLayoutId(position: Int): Int {\r\n        return when(position){\r\n            0 -> R.layout.layout_header\r\n            else -> R.layout.layout_row\r\n        }\r\n    }\r\n    `\r\n    const cod4 = `\r\n    private val adapter = RcAdapter<DataItems>(this, this)\r\n    adapter.setItems(createList())\r\n    adapter.bindRecyclerView(binding.nameList)\r\n    `\r\n    const cod5 = `\r\n    override fun bindView(view: View, getAdapterPosition: () -> Int) {\r\n        view.setOnClickListener { Toast.makeText(this,\"Click Position: \\${getAdapterPosition()}\",Toast.LENGTH_SHORT).show() }\r\n    }\r\n    `\r\n\r\n\r\n    const desp = \"This is Android Recyclerview Adapter  which encapsulate the boilerplate code and push all the UI related work into the parent activity class of the Recyclerview.\"\r\n    return (\r\n        <div className=\"content\" >\r\n            <Heading title=\"Description\" />\r\n            <Content descp={desp} /> <Heading title=\"Adding to project\" />\r\n            <Content descp=\"Enable databinding in the app build.gradle\" />\r\n            <Ccode sample={cod1} />\r\n            <Content descp=\"Add the following line to the app build.gradle dependencies\" />\r\n            <Ccode sample=\"implementation 'com.irfan.android:rcadapter:1.0.0'\" />\r\n            <Heading title=\"Usage\" />\r\n            <ol style={{ paddingLeft: \"10px\" }}>\r\n                <li>implement ItemLayoutManger</li>\r\n                <li>create row layouts</li>\r\n                <Ccode sample={cod2} />\r\n                <li>Override the getLayoutId()</li>\r\n                <Ccode sample={cod3} />\r\n                <li>Initialiaze adapter, set data, and bind recyclerview</li>\r\n                <Ccode sample={cod4} />\r\n                <li>override bindView() (Optional) :Only if the handling of the view is required like for background color change and adding listeners.</li>\r\n                <Ccode sample={cod5} />\r\n            </ol>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contents","import React from 'react'\r\n\r\nfunction Footer() {\r\n    const style = {\r\n        dipsplay: 'block',\r\n    }\r\n    return (\r\n    <div className=\"footer\">\r\n        <p> Created by: Irfan Ul Haq</p>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h3>Easy RecyclerView Adapter</h3>\r\n        \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import Contents from './components/Contents';\nimport Footer from './components/Footer';\n\nimport Header from './components/Header';\n\nfunction App() {\n \n  return (\n    <div className=\"container\">\n     <Header/>\n    <Contents/>\n    <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}